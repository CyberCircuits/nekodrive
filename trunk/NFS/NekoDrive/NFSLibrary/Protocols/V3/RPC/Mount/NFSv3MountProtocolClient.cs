/*
 * Automatically generated by jrpcgen 1.0.7 on 27/08/2010
 * jrpcgen is part of the "Remote Tea.Net" ONC/RPC package for C#
 * See http://remotetea.sourceforge.net for details
 */
using org.acplt.oncrpc;

using System.Net;

/**
 * The class <code>NFSv3MountProtocolClient</code> implements the client stub proxy
 * for the MOUNT_PROGRAM remote program. It provides method stubs
 * which, when called, in turn call the appropriate remote method (procedure).
 */
public class NFSv3MountProtocolClient : OncRpcClientStub {

    /**
     * Constructs a <code>NFSv3MountProtocolClient</code> client stub proxy object
     * from which the MOUNT_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NFSv3MountProtocolClient(IPAddress host, int protocol) :         base(host, NFSv3MountProtocol.MOUNT_PROGRAM, 3, 0, protocol) {
    }

    /**
     * Constructs a <code>NFSv3MountProtocolClient</code> client stub proxy object
     * from which the MOUNT_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NFSv3MountProtocolClient(IPAddress host, int port, int protocol) :        base(host, NFSv3MountProtocol.MOUNT_PROGRAM, 3, port, protocol) {
    }

    /**
     * Constructs a <code>NFSv3MountProtocolClient</code> client stub proxy object
     * from which the MOUNT_PROGRAM remote program can be accessed.
     * @param client ONC/RPC client connection object implementing a particular
     *   protocol.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NFSv3MountProtocolClient(OncRpcClient client) : base(client) {
    }

    /**
     * Constructs a <code>NFSv3MountProtocolClient</code> client stub proxy object
     * from which the MOUNT_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NFSv3MountProtocolClient(IPAddress host, int program, int version, int protocol) :        base(host, program, version, 0, protocol) {
    }

    /**
     * Constructs a <code>NFSv3MountProtocolClient</code> client stub proxy object
     * from which the MOUNT_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NFSv3MountProtocolClient(IPAddress host, int program, int version, int port, int protocol) :        base(host, program, version, port, protocol) {
    }

    /**
     * Call remote procedure MOUNTPROC3_NULL_3.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public void MOUNTPROC3_NULL_3() {
        XdrVoid args_ = XdrVoid.XDR_VOID;
        XdrVoid result_ = XdrVoid.XDR_VOID;
        client.call(NFSv3MountProtocol.MOUNTPROC3_NULL_3, NFSv3MountProtocol.MOUNT_V3, args_, result_);
    }

    /**
     * Call remote procedure MOUNTPROC3_MNT_3.
     * @param arg1 parameter (of type dirpath) to the remote procedure call.
     * @return Result from remote procedure call (of type mountres3).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public mountres3 MOUNTPROC3_MNT_3(dirpath3 arg1) {
        mountres3 result_ = new mountres3();
        client.call(NFSv3MountProtocol.MOUNTPROC3_MNT_3, NFSv3MountProtocol.MOUNT_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure MOUNTPROC3_DUMP_3.
     * @return Result from remote procedure call (of type mountlist3).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public mountlist3 MOUNTPROC3_DUMP_3() {
        XdrVoid args_ = XdrVoid.XDR_VOID;
        mountlist3 result_ = new mountlist3();
        client.call(NFSv3MountProtocol.MOUNTPROC3_DUMP_3, NFSv3MountProtocol.MOUNT_V3, args_, result_);
        return result_;
    }

    /**
     * Call remote procedure MOUNTPROC3_UMNT_3.
     * @param arg1 parameter (of type dirpath) to the remote procedure call.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public void MOUNTPROC3_UMNT_3(dirpath3 arg1) {
        XdrVoid result_ = XdrVoid.XDR_VOID;
        client.call(NFSv3MountProtocol.MOUNTPROC3_UMNT_3, NFSv3MountProtocol.MOUNT_V3, arg1, result_);
    }

    /**
     * Call remote procedure MOUNTPROC3_UMNTALL_3.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public void MOUNTPROC3_UMNTALL_3() {
        XdrVoid args_ = XdrVoid.XDR_VOID;
        XdrVoid result_ = XdrVoid.XDR_VOID;
        client.call(NFSv3MountProtocol.MOUNTPROC3_UMNTALL_3, NFSv3MountProtocol.MOUNT_V3, args_, result_);
    }

    /**
     * Call remote procedure MOUNTPROC3_EXPORT_3.
     * @return Result from remote procedure call (of type exports3).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public exports3 MOUNTPROC3_EXPORT_3() {
        XdrVoid args_ = XdrVoid.XDR_VOID;
        exports3 result_ = new exports3();
        client.call(NFSv3MountProtocol.MOUNTPROC3_EXPORT_3, NFSv3MountProtocol.MOUNT_V3, args_, result_);
        return result_;
    }

}
// End of NFSv3MountProtocolClient.cs
