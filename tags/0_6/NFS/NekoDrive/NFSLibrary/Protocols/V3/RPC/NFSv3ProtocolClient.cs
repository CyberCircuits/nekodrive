/*
 * Automatically generated by jrpcgen 1.0.7 on 27/08/2010
 * jrpcgen is part of the "Remote Tea.Net" ONC/RPC package for C#
 * See http://remotetea.sourceforge.net for details
 */
using org.acplt.oncrpc;

using System.Net;

/**
 * The class <code>NFSv3ProtocolClient</code> implements the client stub proxy
 * for the NFS_PROGRAM remote program. It provides method stubs
 * which, when called, in turn call the appropriate remote method (procedure).
 */
public class NFSv3ProtocolClient : OncRpcClientStub {

    /**
     * Constructs a <code>NFSv3ProtocolClient</code> client stub proxy object
     * from which the NFS_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NFSv3ProtocolClient(IPAddress host, int protocol) :         base(host, NFSv3Protocol.NFS_PROGRAM, 3, 0, protocol) {
    }

    /**
     * Constructs a <code>NFSv3ProtocolClient</code> client stub proxy object
     * from which the NFS_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NFSv3ProtocolClient(IPAddress host, int port, int protocol) :        base(host, NFSv3Protocol.NFS_PROGRAM, 3, port, protocol) {
    }

    /**
     * Constructs a <code>NFSv3ProtocolClient</code> client stub proxy object
     * from which the NFS_PROGRAM remote program can be accessed.
     * @param client ONC/RPC client connection object implementing a particular
     *   protocol.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NFSv3ProtocolClient(OncRpcClient client) : base(client) {
    }

    /**
     * Constructs a <code>NFSv3ProtocolClient</code> client stub proxy object
     * from which the NFS_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NFSv3ProtocolClient(IPAddress host, int program, int version, int protocol) :        base(host, program, version, 0, protocol) {
    }

    /**
     * Constructs a <code>NFSv3ProtocolClient</code> client stub proxy object
     * from which the NFS_PROGRAM remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public NFSv3ProtocolClient(IPAddress host, int program, int version, int port, int protocol) :        base(host, program, version, port, protocol) {
    }

    /**
     * Call remote procedure NFSPROC3_NULL_3.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public void NFSPROC3_NULL_3() {
        XdrVoid args_ = XdrVoid.XDR_VOID;
        XdrVoid result_ = XdrVoid.XDR_VOID;
        client.call(NFSv3Protocol.NFSPROC3_NULL_3, NFSv3Protocol.NFS_V3, args_, result_);
    }

    /**
     * Call remote procedure NFSPROC3_GETATTR_3.
     * @param arg1 parameter (of type GETATTR3args) to the remote procedure call.
     * @return Result from remote procedure call (of type GETATTR3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public GETATTR3res NFSPROC3_GETATTR_3(GETATTR3args arg1) {
        GETATTR3res result_ = new GETATTR3res();
        client.call(NFSv3Protocol.NFSPROC3_GETATTR_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_SETATTR_3.
     * @param arg1 parameter (of type SETATTR3args) to the remote procedure call.
     * @return Result from remote procedure call (of type SETATTR3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public SETATTR3res NFSPROC3_SETATTR_3(SETATTR3args arg1) {
        SETATTR3res result_ = new SETATTR3res();
        client.call(NFSv3Protocol.NFSPROC3_SETATTR_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_LOOKUP_3.
     * @param arg1 parameter (of type LOOKUP3args) to the remote procedure call.
     * @return Result from remote procedure call (of type LOOKUP3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public LOOKUP3res NFSPROC3_LOOKUP_3(LOOKUP3args arg1) {
        LOOKUP3res result_ = new LOOKUP3res();
        client.call(NFSv3Protocol.NFSPROC3_LOOKUP_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_ACCESS_3.
     * @param arg1 parameter (of type ACCESS3args) to the remote procedure call.
     * @return Result from remote procedure call (of type ACCESS3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public ACCESS3res NFSPROC3_ACCESS_3(ACCESS3args arg1) {
        ACCESS3res result_ = new ACCESS3res();
        client.call(NFSv3Protocol.NFSPROC3_ACCESS_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_READLINK_3.
     * @param arg1 parameter (of type READLINK3args) to the remote procedure call.
     * @return Result from remote procedure call (of type READLINK3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public READLINK3res NFSPROC3_READLINK_3(READLINK3args arg1) {
        READLINK3res result_ = new READLINK3res();
        client.call(NFSv3Protocol.NFSPROC3_READLINK_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_READ_3.
     * @param arg1 parameter (of type READ3args) to the remote procedure call.
     * @return Result from remote procedure call (of type READ3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public READ3res NFSPROC3_READ_3(READ3args arg1) {
        READ3res result_ = new READ3res();
        client.call(NFSv3Protocol.NFSPROC3_READ_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_WRITE_3.
     * @param arg1 parameter (of type WRITE3args) to the remote procedure call.
     * @return Result from remote procedure call (of type WRITE3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public WRITE3res NFSPROC3_WRITE_3(WRITE3args arg1) {
        WRITE3res result_ = new WRITE3res();
        client.call(NFSv3Protocol.NFSPROC3_WRITE_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_CREATE_3.
     * @param arg1 parameter (of type CREATE3args) to the remote procedure call.
     * @return Result from remote procedure call (of type CREATE3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public CREATE3res NFSPROC3_CREATE_3(CREATE3args arg1) {
        CREATE3res result_ = new CREATE3res();
        client.call(NFSv3Protocol.NFSPROC3_CREATE_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_MKDIR_3.
     * @param arg1 parameter (of type MKDIR3args) to the remote procedure call.
     * @return Result from remote procedure call (of type MKDIR3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public MKDIR3res NFSPROC3_MKDIR_3(MKDIR3args arg1) {
        MKDIR3res result_ = new MKDIR3res();
        client.call(NFSv3Protocol.NFSPROC3_MKDIR_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_SYMLINK_3.
     * @param arg1 parameter (of type SYMLINK3args) to the remote procedure call.
     * @return Result from remote procedure call (of type SYMLINK3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public SYMLINK3res NFSPROC3_SYMLINK_3(SYMLINK3args arg1) {
        SYMLINK3res result_ = new SYMLINK3res();
        client.call(NFSv3Protocol.NFSPROC3_SYMLINK_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_MKNOD_3.
     * @param arg1 parameter (of type MKNOD3args) to the remote procedure call.
     * @return Result from remote procedure call (of type MKNOD3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public MKNOD3res NFSPROC3_MKNOD_3(MKNOD3args arg1) {
        MKNOD3res result_ = new MKNOD3res();
        client.call(NFSv3Protocol.NFSPROC3_MKNOD_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_REMOVE_3.
     * @param arg1 parameter (of type REMOVE3args) to the remote procedure call.
     * @return Result from remote procedure call (of type REMOVE3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public REMOVE3res NFSPROC3_REMOVE_3(REMOVE3args arg1) {
        REMOVE3res result_ = new REMOVE3res();
        client.call(NFSv3Protocol.NFSPROC3_REMOVE_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_RMDIR_3.
     * @param arg1 parameter (of type RMDIR3args) to the remote procedure call.
     * @return Result from remote procedure call (of type RMDIR3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public RMDIR3res NFSPROC3_RMDIR_3(RMDIR3args arg1) {
        RMDIR3res result_ = new RMDIR3res();
        client.call(NFSv3Protocol.NFSPROC3_RMDIR_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_RENAME_3.
     * @param arg1 parameter (of type RENAME3args) to the remote procedure call.
     * @return Result from remote procedure call (of type RENAME3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public RENAME3res NFSPROC3_RENAME_3(RENAME3args arg1) {
        RENAME3res result_ = new RENAME3res();
        client.call(NFSv3Protocol.NFSPROC3_RENAME_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_LINK_3.
     * @param arg1 parameter (of type LINK3args) to the remote procedure call.
     * @return Result from remote procedure call (of type LINK3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public LINK3res NFSPROC3_LINK_3(LINK3args arg1) {
        LINK3res result_ = new LINK3res();
        client.call(NFSv3Protocol.NFSPROC3_LINK_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_READDIR_3.
     * @param arg1 parameter (of type READDIR3args) to the remote procedure call.
     * @return Result from remote procedure call (of type READDIR3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public READDIR3res NFSPROC3_READDIR_3(READDIR3args arg1) {
        READDIR3res result_ = new READDIR3res();
        client.call(NFSv3Protocol.NFSPROC3_READDIR_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_READDIRPLUS_3.
     * @param arg1 parameter (of type READDIRPLUS3args) to the remote procedure call.
     * @return Result from remote procedure call (of type READDIRPLUS3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public READDIRPLUS3res NFSPROC3_READDIRPLUS_3(READDIRPLUS3args arg1) {
        READDIRPLUS3res result_ = new READDIRPLUS3res();
        client.call(NFSv3Protocol.NFSPROC3_READDIRPLUS_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_FSSTAT_3.
     * @param arg1 parameter (of type FSSTAT3args) to the remote procedure call.
     * @return Result from remote procedure call (of type FSSTAT3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public FSSTAT3res NFSPROC3_FSSTAT_3(FSSTAT3args arg1) {
        FSSTAT3res result_ = new FSSTAT3res();
        client.call(NFSv3Protocol.NFSPROC3_FSSTAT_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_FSINFO_3.
     * @param arg1 parameter (of type FSINFO3args) to the remote procedure call.
     * @return Result from remote procedure call (of type FSINFO3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public FSINFO3res NFSPROC3_FSINFO_3(FSINFO3args arg1) {
        FSINFO3res result_ = new FSINFO3res();
        client.call(NFSv3Protocol.NFSPROC3_FSINFO_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_PATHCONF_3.
     * @param arg1 parameter (of type PATHCONF3args) to the remote procedure call.
     * @return Result from remote procedure call (of type PATHCONF3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public PATHCONF3res NFSPROC3_PATHCONF_3(PATHCONF3args arg1) {
        PATHCONF3res result_ = new PATHCONF3res();
        client.call(NFSv3Protocol.NFSPROC3_PATHCONF_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

    /**
     * Call remote procedure NFSPROC3_COMMIT_3.
     * @param arg1 parameter (of type COMMIT3args) to the remote procedure call.
     * @return Result from remote procedure call (of type COMMIT3res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public COMMIT3res NFSPROC3_COMMIT_3(COMMIT3args arg1) {
        COMMIT3res result_ = new COMMIT3res();
        client.call(NFSv3Protocol.NFSPROC3_COMMIT_3, NFSv3Protocol.NFS_V3, arg1, result_);
        return result_;
    }

}
// End of NFSv3ProtocolClient.cs
